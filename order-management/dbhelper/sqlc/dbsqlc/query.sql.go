// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package dbsqlc

import (
	"context"
)

const getOrder = `-- name: GetOrder :many
SELECT user_order.unique_order_id, sub_order.product_id, sub_order.quantity, sub_order.status as suborderstatus, user_order.user_id, user_order.status as orderstatus, user_order.total_price
FROM user_order JOIN sub_order ON user_order.unique_order_id=sub_order.sub_order
where user_order.unique_order_id=$1 and user_id=$2
`

type GetOrderParams struct {
	UniqueOrderID string
	UserID        int32
}

type GetOrderRow struct {
	UniqueOrderID  string
	ProductID      int32
	Quantity       int32
	Suborderstatus string
	UserID         int32
	Orderstatus    string
	TotalPrice     float64
}

func (q *Queries) GetOrder(ctx context.Context, arg GetOrderParams) ([]GetOrderRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrder, arg.UniqueOrderID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderRow
	for rows.Next() {
		var i GetOrderRow
		if err := rows.Scan(
			&i.UniqueOrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Suborderstatus,
			&i.UserID,
			&i.Orderstatus,
			&i.TotalPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrder = `-- name: InsertOrder :one
INSERT INTO user_order(
    user_id, unique_order_id, total_price, version
)VALUES(
    $1, $2, $3, 1
)
RETURNING id
`

type InsertOrderParams struct {
	UserID        int32
	UniqueOrderID string
	TotalPrice    float64
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertOrder, arg.UserID, arg.UniqueOrderID, arg.TotalPrice)
	var id string
	err := row.Scan(&id)
	return id, err
}

const insertSubOrder = `-- name: InsertSubOrder :one
INSERT INTO sub_order(
    unique_order_id, product_id, quantity, status, version
)VALUES(
    $1, $2, $3, $4, 1
)
RETURNING id
`

type InsertSubOrderParams struct {
	UniqueOrderID string
	ProductID     int32
	Quantity      int32
	Status        string
}

func (q *Queries) InsertSubOrder(ctx context.Context, arg InsertSubOrderParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertSubOrder,
		arg.UniqueOrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Status,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateSubOrderStatus = `-- name: UpdateSubOrderStatus :exec
UPDATE sub_order
SET status=$2, version=version+1
WHERE id=$1
`

type UpdateSubOrderStatusParams struct {
	ID     int32
	Status string
}

func (q *Queries) UpdateSubOrderStatus(ctx context.Context, arg UpdateSubOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateSubOrderStatus, arg.ID, arg.Status)
	return err
}

const updateUserOrderStatus = `-- name: UpdateUserOrderStatus :exec
UPDATE user_order
SET status=$2, version=version+1
WHERE id=$1
`

type UpdateUserOrderStatusParams struct {
	ID     string
	Status string
}

func (q *Queries) UpdateUserOrderStatus(ctx context.Context, arg UpdateUserOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserOrderStatus, arg.ID, arg.Status)
	return err
}
