// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package dbsqlc

import (
	"context"
)

const getUser = `-- name: GetUser :many
SELECT id, email, password, created, updated, deleted FROM users
WHERE email=$1
`

func (q *Queries) GetUser(ctx context.Context, email string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUser, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Created,
			&i.Updated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :many
SELECT id, email, password, created, updated, deleted FROM users
WHERE id=$1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUserById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Created,
			&i.Updated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users(
    email, password
)VALUES(
    $1, $2
)
RETURNING id
`

type InsertUserParams struct {
	Email    string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.Email, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}
